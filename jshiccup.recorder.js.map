{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///jshiccup.recorder.js","webpack:///webpack/bootstrap f2acb03cf803e5a4ce11","webpack:///./src/HiccupRecorder.ts"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","Object","defineProperty","value","HiccupRecorder","worker","writer","resolutionMs","reportingIntervalMs","line","console","log","prototype","start","_this","startEvent","type","onmessage","event","data","postMessage","timeBeforeMeasurement","performance","now","recorderLoop","setInterval","timeAfterMeasurement","recordEvent","deltaTimeMicrosec","stop","clearInterval","default"],"mappings":"CAAA,SAAAA,EAAAC,GACA,gBAAAC,UAAA,gBAAAC,QACAA,OAAAD,QAAAD,IACA,kBAAAG,gBAAAC,IACAD,OAAA,cAAAH,GACA,gBAAAC,SACAA,QAAA,SAAAD,IAEAD,EAAA,SAAAC,KACCK,KAAA,WACD,MCAgB,UAAUC,GCN1B,QAAAC,GAAAC,GAGA,GAAAC,EAAAD,GACA,MAAAC,GAAAD,GAAAP,OAGA,IAAAC,GAAAO,EAAAD,IACAP,WACAS,GAAAF,EACAG,QAAA,EAUA,OANAL,GAAAE,GAAAI,KAAAV,EAAAD,QAAAC,IAAAD,QAAAM,GAGAL,EAAAS,QAAA,EAGAT,EAAAD,QAvBA,GAAAQ,KAqCA,OATAF,GAAAM,EAAAP,EAGAC,EAAAO,EAAAL,EAGAF,EAAAQ,EAAA,GAGAR,EAAA,KDgBM,SAAUL,EAAQD,GAEvB,YACAe,QAAOC,eAAehB,EAAS,cAAgBiB,OAAO,GElDvD,IAAAC,GAAA,WAGE,QAAAA,GACUC,EACDC,EACCC,EACAC,GAFD,SAAAF,MAAA,SAAUG,GAAiB,MAAAC,SAAQC,IAAIF,KACtC,SAAAF,MAAA,KACA,SAAAC,MAAA,KAHAlB,KAAAe,SACDf,KAAAgB,SACChB,KAAAiB,eACAjB,KAAAkB,sBA+BZ,MA5BEJ,GAAAQ,UAAAC,MAAA,cAAAC,GAAAxB,KACQyB,GACJC,KAAM,QACNT,aAAcjB,KAAKiB,aACnBC,oBAAqBlB,KAAKkB,oBAE5BlB,MAAKe,OAAOY,UAAY,SAAAC,GACtBJ,EAAKR,OAAOY,EAAMC,OAEpB7B,KAAKe,OAAOe,YAAYL,EACxB,IAAIM,GAAwBC,YAAYC,KACxCjC,MAAKkC,aAAeC,YAAY,WAC9B,GAAMC,GAAuBJ,YAAYC,MACnCI,GACJX,KAAM,SACNY,kBAAoE,KAAhDF,EAAuBL,GAE7CP,GAAKT,OAAOe,YAAYO,GACxBN,EAAwBK,GACvBpC,KAAKiB,eAGVH,EAAAQ,UAAAiB,KAAA,WACEC,cAAcxC,KAAKkC,cACnBlC,KAAKe,OAAOe,aACVJ,KAAM,UAGZZ,IAEAlB,GAAA6C,QAAe3B","file":"jshiccup.recorder.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"jsHiccup\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"jsHiccup\"] = factory();\n\telse\n\t\troot[\"jsHiccup\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"jsHiccup\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"jsHiccup\"] = factory();\n\telse\n\t\troot[\"jsHiccup\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports) {\n\n\t\"use strict\";\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\tvar HiccupRecorder = /** @class */ (function () {\r\n\t    function HiccupRecorder(worker, writer, resolutionMs, reportingIntervalMs) {\r\n\t        if (writer === void 0) { writer = function (line) { return console.log(line); }; }\r\n\t        if (resolutionMs === void 0) { resolutionMs = 100; }\r\n\t        if (reportingIntervalMs === void 0) { reportingIntervalMs = 5000; }\r\n\t        this.worker = worker;\r\n\t        this.writer = writer;\r\n\t        this.resolutionMs = resolutionMs;\r\n\t        this.reportingIntervalMs = reportingIntervalMs;\r\n\t    }\r\n\t    HiccupRecorder.prototype.start = function () {\r\n\t        var _this = this;\r\n\t        var startEvent = {\r\n\t            type: \"start\",\r\n\t            resolutionMs: this.resolutionMs,\r\n\t            reportingIntervalMs: this.reportingIntervalMs\r\n\t        };\r\n\t        this.worker.onmessage = function (event) {\r\n\t            _this.writer(event.data);\r\n\t        };\r\n\t        this.worker.postMessage(startEvent);\r\n\t        var timeBeforeMeasurement = performance.now();\r\n\t        this.recorderLoop = setInterval(function () {\r\n\t            var timeAfterMeasurement = performance.now();\r\n\t            var recordEvent = {\r\n\t                type: \"record\",\r\n\t                deltaTimeMicrosec: (timeAfterMeasurement - timeBeforeMeasurement) * 1000\r\n\t            };\r\n\t            _this.worker.postMessage(recordEvent);\r\n\t            timeBeforeMeasurement = timeAfterMeasurement;\r\n\t        }, this.resolutionMs);\r\n\t    };\r\n\t    HiccupRecorder.prototype.stop = function () {\r\n\t        clearInterval(this.recorderLoop);\r\n\t        this.worker.postMessage({\r\n\t            type: \"stop\"\r\n\t        });\r\n\t    };\r\n\t    return HiccupRecorder;\r\n\t}());\r\n\texports.default = HiccupRecorder;\r\n\n\n/***/ })\n/******/ ])\n});\n;\n\n\n// WEBPACK FOOTER //\n// jshiccup.recorder.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap f2acb03cf803e5a4ce11","import {\r\n  Event,\r\n  RecordHiccupEvent,\r\n  StartHiccupRecorderEvent,\r\n  StopHiccupRecorderEvent\r\n} from \"./api\";\r\n\r\nclass HiccupRecorder {\r\n  private recorderLoop: any;\r\n\r\n  constructor(\r\n    private worker: Worker,\r\n    public writer = (line: string) => console.log(line),\r\n    private resolutionMs = 100,\r\n    private reportingIntervalMs = 5000\r\n  ) {}\r\n\r\n  start() {\r\n    const startEvent: StartHiccupRecorderEvent = {\r\n      type: \"start\",\r\n      resolutionMs: this.resolutionMs,\r\n      reportingIntervalMs: this.reportingIntervalMs\r\n    };\r\n    this.worker.onmessage = event => {\r\n      this.writer(event.data);\r\n    };\r\n    this.worker.postMessage(startEvent);\r\n    let timeBeforeMeasurement = performance.now();\r\n    this.recorderLoop = setInterval(() => {\r\n      const timeAfterMeasurement = performance.now();\r\n      const recordEvent: RecordHiccupEvent = {\r\n        type: \"record\",\r\n        deltaTimeMicrosec: (timeAfterMeasurement - timeBeforeMeasurement) * 1000\r\n      };\r\n      this.worker.postMessage(recordEvent);\r\n      timeBeforeMeasurement = timeAfterMeasurement;\r\n    }, this.resolutionMs);\r\n  }\r\n\r\n  stop() {\r\n    clearInterval(this.recorderLoop);\r\n    this.worker.postMessage({\r\n      type: \"stop\"\r\n    });\r\n  }\r\n}\r\n\r\nexport default HiccupRecorder;\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/HiccupRecorder.ts"],"sourceRoot":""}